/**
*	@author Takahiro HARADA
*/
#ifdef _WIN32
#pragma comment(lib,"cutil32.lib")
#endif

#include <stdlib.h>
#include <GL/glut.h>

#include <stdio.h>
#include <iostream>
#include <fstream>

using namespace std;

#include "demo.h"
#include "demoParticles.h"

#define DEMO_NAME DemoParticles

// mouse controls
int mouse_old_x, mouse_old_y;
int mouse_buttons = 0;
float rotate_x = 0.0, rotate_y = 0.0;
float translate_x = 0.0f;
float translate_y = -2.0f;
float translate_z = -25.0f;

int wWidth,wHeight;

float rot=0;
float rotY=0;

bool autoMove = false;

DEMO_NAME* s_demo;

void setModelViewMatrix()
{
	glLoadIdentity();
	glTranslatef(translate_x, translate_y, translate_z);
	glRotatef(rotate_x, 1.0, 0.0, 0.0);
	glRotatef(rotate_y, 0.0, 1.0, 0.0);
}
void setPerspectiveProjMatrix()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(65.0, (double)wWidth / (double)wHeight, 0.001, 1000.0);
	glMatrixMode(GL_MODELVIEW);
}
void setOrthoProjMatrix()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1,1,-1,1,-100,100);
	glMatrixMode(GL_MODELVIEW);
}
void display(void)
{
	glLoadIdentity();
	{
		setPerspectiveProjMatrix();
		setModelViewMatrix();
	}
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	glRotatef(rot,0,0,1);

	s_demo->render();
	
	glutSwapBuffers();
}
void idle(void)
{
	if( autoMove )
	{
		s_demo->step();
		s_demo->readback();
	}

	glutPostRedisplay();
}
void resize(int w, int h)
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1,1,-1,1,-100,100);
	gluLookAt(.0, .0, 3.8, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	glMatrixMode(GL_MODELVIEW);
	wWidth=w;wHeight=h;
}
void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_COLOR_MATERIAL);

	glutSetWindowTitle("Demo: Rigid Body System");

	s_demo = new DEMO_NAME();
	s_demo->init();
}
void mouse(int button, int state, int x, int y)
{	
	if (state == GLUT_DOWN) {
		mouse_buttons |= 1<<button;
	} else if (state == GLUT_UP) {
		mouse_buttons = 0;
	}
	if (glutGetModifiers() & GLUT_ACTIVE_SHIFT
		 && state == GLUT_DOWN){
		mouse_buttons |= 2 << 2;
	}
	
	mouse_old_x = x;
	mouse_old_y = y;
	glutPostRedisplay();
}
void motion(int x, int y)
{
	float dx, dy;
	dx = x - mouse_old_x;
	dy = y - mouse_old_y;
	
	if(mouse_buttons & (2 << 2) && mouse_buttons & 1){
		
	}else if (mouse_buttons & 1) {
		rotate_x += dy * 0.2;
		rotate_y += dx * 0.2;
	} else if (mouse_buttons & (2<<2)) {
		translate_z += dy*0.01f;
	} else if (mouse_buttons & 4){
		translate_x += dx * 0.005;
		translate_y -= dy * 0.005;
	}
	
	
	mouse_old_x = x;
	mouse_old_y = y;
}
void keyboard(unsigned char key, int x, int y)
{
	const char str = key;
	float dz = 0.1f;
	
	switch (key) {
		case's':
			translate_z+=dz;
			break;
		case'S':
			translate_z-=dz;
			break;

		case 'q':
		case 'Q':
		case '\033':
			delete s_demo;
			exit(0);
		case 'a':
			autoMove = !autoMove;
			break;
		case 'd':
			s_demo->m_debugDisplay = !s_demo->m_debugDisplay;
			break;
		case ' ':
			s_demo->step();
			s_demo->readback();
			break;
		default:
			break;
	}
	glutPostRedisplay();
}
int main(int argc, char *argv[])
{
	glutInitWindowSize(1024,768);
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA| GLUT_DEPTH | GLUT_DOUBLE);
	glutCreateWindow(argv[0]);

	glutDisplayFunc(display);
	glutReshapeFunc(resize);
	glutMouseFunc(mouse);
	glutMotionFunc(motion);
	glutKeyboardFunc(keyboard);
	glutIdleFunc(idle);
	init();
	glutMainLoop();
	
	return 0;
}


